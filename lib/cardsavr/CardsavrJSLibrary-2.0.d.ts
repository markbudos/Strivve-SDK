export declare class CardsavrSession {
    sessionData: any;
    cardsavrCert?: string;
    constructor(baseUrl: string, sessionKey: string, appName: string, userName: string, password?: string, userCredentialGrant?: string, cardsavrCert?: string);
    setSessionHeaders: (headersObject: any) => void;
    makeTraceHeader: (traceHeaderObject: any) => {
        "swch-persistent-trace": string;
    };
    setIdentificationHeader: (idString: string) => void;
    removeSessionHeader: (...headerKeys: string[]) => void;
    private _makeSafeKeyHeader;
    sendRequest: (path: string, method: "get" | "GET" | "delete" | "DELETE" | "head" | "HEAD" | "options" | "OPTIONS" | "post" | "POST" | "put" | "PUT" | "patch" | "PATCH" | undefined, requestBody?: any, headersToAdd?: {}, cookiesEnforced?: boolean) => Promise<any>;
    get: (path: string, filter: any, headersToAdd?: {}, cookiesEnforced?: boolean) => Promise<any>;
    post: (path: string, body: any, headersToAdd?: {}, cookiesEnforced?: boolean) => Promise<any>;
    put: (path: string, id: any, body: any, headersToAdd?: {}, cookiesEnforced?: boolean) => Promise<any>;
    delete: (path: string, id: number, headersToAdd?: {}, cookiesEnforced?: boolean) => Promise<any>;
    private _startSession;
    private _login;
    init: (headersToAdd?: {}) => Promise<any>;
    getAccounts: (filter: any, headersToAdd?: {}) => Promise<any>;
    createAccount: (body: any, safeKey: string, headersToAdd?: {}) => Promise<any>;
    updateAccount: (id: number, body: any, safeKey: string, headersToAdd?: {}) => Promise<any>;
    deleteAccount: (id: number, safeKey: string, headersToAdd?: {}) => Promise<any>;
    getAddresses: (filter: any, headersToAdd?: {}) => Promise<any>;
    createAddress: (body: any, headersToAdd?: {}) => Promise<any>;
    updateAddress: (id: number, body: any, headersToAdd?: {}) => Promise<any>;
    deleteAddress: (id: number, headersToAdd?: {}) => Promise<any>;
    getBins: (filter: any, headersToAdd?: {}) => Promise<any>;
    createBin: (body: any, headersToAdd?: {}) => Promise<any>;
    updateBin: (id: number, body: any, headersToAdd?: {}) => Promise<any>;
    deleteBin: (id: number, headersToAdd?: {}) => Promise<any>;
    getCards: (filter: any, headersToAdd?: {}) => Promise<any>;
    createCard: (body: any, safeKey: string, headersToAdd?: {}) => Promise<any>;
    updateCard: (id: number, body: any, headersToAdd?: {}) => Promise<any>;
    deleteCard: (id: number, safeKey: string, headersToAdd?: {}) => Promise<any>;
    getCardPlacementResults: (filter: any, headersToAdd?: {}) => Promise<any>;
    getIntegrators: (filter: any, headersToAdd?: {}) => Promise<any>;
    createIntegrator: (body: any, headersToAdd?: {}) => Promise<any>;
    updateIntegrator: (id: number, body: any, headersToAdd?: {}) => Promise<any>;
    deleteIntegrator: (id: number, headersToAdd?: {}) => Promise<any>;
    getMerchantSites: (filter: any, headersToAdd?: {}) => Promise<any>;
    registerForJobStatusUpdates: (jobId: number, headersToAdd?: {}) => Promise<any>;
    getJobStatusUpdate: (jobId: number, cardsavrMessagingAccessKey: string, headersToAdd?: {}) => Promise<any>;
    getJobInformationRequest: (jobId: number, headersToAdd?: {}) => Promise<any>;
    sendJobInformation: (jobId: number, envelope_id: string, type: string, message: string, headersToAdd?: {}) => Promise<any>;
    getUsers: (filter: any, headersToAdd?: {}) => Promise<any>;
    getCredentialGrant: (id: number, headersToAdd?: {}) => Promise<any>;
    createUser: (body: any, headersToAdd?: {}) => Promise<any>;
    updateUser: (id: number, body: any, headersToAdd?: {}) => Promise<any>;
    updatePassword: (id: number, body: any, headersToAdd?: {}) => Promise<any>;
    deleteUser: (id: number, headersToAdd?: {}) => Promise<any>;
    getMultipleSitesJobs: (filter: any, headersToAdd?: {}) => Promise<any>;
    createMultipleSitesJob: (body: any, safeKey: string, headersToAdd?: {}) => Promise<any>;
    getSingleSiteJobs: (filter: any, headersToAdd?: {}) => Promise<any>;
    createSingleSiteJob: (body: any, safeKey: string, headersToAdd?: {}) => Promise<any>;
}
